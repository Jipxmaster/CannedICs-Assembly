#--------------------------------
#--------------------------------
# Not table initialization
# -From 0100-01ff
# [0000] counter
# [0001] value
#location 0000: value = ff, counter = 00
ap 01 zap mw ff zap zmw
#
# while (counter + 1) != carry
#location 0007: (counter, 01) = value
ap 01 zapaj maj
zap map ap 01 amw
#location 0010: value -= 1
zapaj aj ff maj amw
#location 0015: counter += 1; if carry goto 0023
zapaj maj ap 23 zap
aj 01 zap amw
#location 001e: goto 0007
ap 07 zap aj ff
#--------------------------------
#--------------------------------
# Right circular shift table
# -From 0200-02ff
# [0000] counter
# [0001] value
#location 0023: counter = 00, value = 00
ap 01 zap zmw zap zmw
#
# while (counter + 1) != carry
#location 0029: (counter, 02) = value
ap 01 zapaj maj
zap map ap 02 amw
#location 0032: value += 80
ap 01 zapaj
aj 80 maj amw
#location 0039: counter += 1
zapaj aj 01 maj amw
#location 003e: (counter, 02) = value
ap 01 zapaj maj
zap map ap 02 amw
#location 0047: value += 81
ap 01 zapaj aj 81
maj amw
#location 004e: counter += 1; if carry goto 005c
zapaj maj ap 5c zap
aj 01 zap amw
#location 0057: goto 0029
ap 29 zap aj ff
#--------------------------------
#--------------------------------
# Right shift table
# -From 0300-03ff
# [0000] counter
# [0001] value
#location 005c: counter = 00, value = 00
ap 01 zap zmw zap zmw
#
#while (counter + 1) != carry
#location 0062: (counter, 03) = value
ap 01 zapaj maj
zap map ap 03 amw
#location 006b: counter += 01
zap zapaj aj 01 maj amw
#location 0071: (counter, 03) = value
ap 01 zapaj maj
zap map ap 03 amw
#location 007a: value += 1
ap 01 zapaj aj 01 maj amw     ### MAIN FUNCTION ADDRESS ###
#location 0081: counter += 1; if carry goto 489 ##########
zapaj maj ap 89 ap 04
aj 01 zap zap amw
#location 008c: goto 0062
ap 62 zap aj ff
#--------------------------------
#--------------------------------
# 14 Bit addition
# -Little endian
# C6543210 Bit order
# 00000000 Data
# [0000] a_l
# [0001] a_h
# [0002] b_l
# [0003] b_h
# [000c] carry flag
# [000e] ret_l
# [000f] ret_h
#
# low byte addition
#l 91: a_l += b_l
zap zapaj maj
ap 02 zap maj
zap amw
#l 9a: if a_l + 80 = carry goto a6
zaj maj
ap a6 zap aj 80
#l a1: goto af
ap af zap aj 80
#l a6: store a_l; a_h += 1
zap amw
ap 01 zapaj maj
aj 01 amw
#
# high byte addition
#l af: a_h += b_h
ap 01 zapaj maj
ap 03 zap maj
ap 01 zap amw
#l bb: if b_h + 80 = carry goto cb
zaj maj
ap cb zap aj 80
#l c2: carry_flag = 00; goto d4
ap 0c zap zmw
ap d4 zap aj 80
#l cb: store a_h; carry_flag = 01
ap 01 zap amw
ap 0c zap mw 01
#
# return operation
#l d4: return
ap 0f zapaj maj
ap 0e zap map aap
aj ff aj ff
#--------------------------------
#--------------------------------
# 14 bit rotate left
# -Little endian
# bit 0 = carry
# carry = bit 13
# [0000] a_l
# [0001] a_h
# [000b] temp_carry
# [000c] carry_flag
# [0010] ret_l
# [0011] ret_h
#
# high left shift
#l e1: a_h += a_h
ap 01 zapaj maj maj amw
#l e7: if a_h + 80 = carry goto f3
zaj maj ap f3 zap aj 80
#l ee: goto fc
ap fc zap aj 80
#l f3: store a_h; temp_carry = 01
ap 01 zap amw
ap 0b zap mw 01
#
# low left shift
#l fc: a_l = a_l + a_l + carry_flag
zapaj maj maj amw
ap 0c zapaj maj
zap maj amw
#l 107: if a_l + 80 = carry goto 115
zaj maj ap 15 ap 01 aj 80
#l 10f: goto 11f
ap 1f ap 01 aj 80
#l 115: store a_l; a_h += 80
zap zap amw
ap 01 zapaj aj 01 maj amw
#
# carry flag udpate
#l 11f: carry_flag = temp_carry
ap 0b zapaj maj ap 0c zap amw
#l 127: reset temp carry
ap 0b zap zmw
#
# return function
#l 12b:
ap 11 zapaj maj
ap 10 zap map aap
aj ff aj ff
#--------------------------------
#--------------------------------
# 14 bit rotate right
# -Little endian
# bit 13 = carry
# carry = bit 0
# [0000] a_l
# [0001] a_h
# [000c] carry_flag
# [0012] ret_l
# [0013] ret_h
#
# rotate left a_l; a_h
#l 138
zap zapaj map ap 02 maj zap zap amw
ap 01 zapaj map ap 02 maj ap 01 zap amw
#
# if a_h + 80 = carry goto 158
#l 14c
ap 58 ap 01 aj 80
#l 152: goto 161
ap 61 ap 01 aj 80
#l 158: store a_h; a_l += 40
ap 01 zap amw
zapaj aj 40 maj amw
#
# if carry = 1 goto 171
#l 161
ap 0c zapaj maj
ap 71 ap 01 aj ff
#l 16b: goto 178
ap 78 ap 01 aj 01
#l 171: a_h += 40
ap 01 zapaj aj 40 maj amw
#
# if a_l + 80 = carry goto 18b
#l 178
zap zapaj maj
ap 8b ap 01 aj 80
ap 0c zap zmw
#l 185: goto 193
ap 93 ap 01 aj 80
#l 18b: store a_l; carry_flag = 01
zap zap amw
ap 0c zap mw 01
#
# return operation
#l 193
ap 13 zapaj maj
ap 12 zap map aap
aj ff aj ff
#--------------------------------
#--------------------------------
# 14 bit multiplication
# -Little edian
# -Has its own ov flag
# [0000] a_l
# [0001] a_h
# [0002] b_l
# [0003] b_h
# [0004] c_l
# [0005] c_h
# [0006] d_l
# [0007] d_h
# [0008] e_l
# [0009] e_h
# [000b] temp_carry
# [000c] carry_flag
# [000d] overflow_flag
# [0014] ret_l
# [0015] ret_h
#
#l 1a0: c = 0
ap 04 zap zmw
ap 05 zap zmw
#
#l 1a8: d_l = f2; d_h = 00
ap 06 zap mw f2
ap 07 zap zmw
#
#l 1b1: overflow_flag = 00
ap 0d zap zmw
#
#l 1b5: carry_flag = d_h
ap 07 zapaj maj
ap 0c zap amw
#
# rotate right b
#l 1bd: e = a
zap zapaj maj ap 08 zap amw
ap 01 zapaj maj ap 09 zap amw
#l 1cc: a = b
ap 02 zapaj maj zap amw
ap 03 zapaj maj ap 01 zap amw
#l 1da: rotate right a
ap 12 zap mw ec
ap 13 zap mw 01
ap 38 ap 01 aj ff aj ff
#l 1ec: b = a
zap zapaj maj ap 02 zap amw
ap 01 zapaj maj ap 03 zap amw
#l 1fb: a = e
ap 08 zapaj maj zap amw
ap 09 zapaj maj ap 01 zap amw
#
#l 209: d_h = carry_flag
ap 0c zapaj maj
ap 07 zap amw
#
#l 211: if carry_flag = 01 goto 221
ap 0c zapaj maj
ap 21 ap 02 aj ff
#
#l 21b: goto 297
ap 97 ap 02 aj 01
#
# c = c + a
#l 221: e = b
ap 02 zapaj maj ap 08 zap amw
ap 03 zapaj maj ap 09 zap amw
#l 231: b = a
zapaj maj ap 02 zap amw
ap 01 zapaj maj ap 03 zap amw
#l 23f: a = c
ap 04 zapaj maj zap amw
ap 05 zapaj maj ap 01 zap amw
#l 24d: add a, b
ap 0e zap mw 5e
ap 0f zap mw 02
ap 91 zap aj ff aj ff
#l 25e: c = a
zap zapaj maj ap 04 zap amw
ap 01 zapaj maj ap 05 zap amw
#l 26d: a = b
ap 02 zapaj maj zap amw
ap 03 zapaj maj ap 01 zap amw
#l 27b: b = e
ap 08 zapaj maj ap 02 zap amw
ap 09 zapaj maj ap 03 zap amw
#
#l 28b: overflow_flag update
ap 0d zapaj maj
ap 0b zap maj
ap 0d zap amw
#
#l 297: carry_flag = 0
ap 0c zap zmw
#
#l 29b: rotate left a
ap 10 zap mw ac
ap 11 zap mw 02
ap e1 zap aj ff aj ff
#
#l 2ac: temp_overflow update
ap 0c zapaj maj
ap 0b zap amw
#
# inc d_l; if not zero goto 2c8
#l 2b4:
ap 06 zapaj maj
ap c8 ap 02 aj 01
ap 06 zap amw
#
#l 2c2: goto 1b5
ap b5 ap 01 aj ff
#
#l 2c8: a = c
ap 04 zapaj maj zap amw
ap 05 zapaj maj ap 01 zap amw
#l 2d6: return operation
ap 15 zapaj maj
ap 14 zap map aap
aj ff aj ff
#--------------------------------
#--------------------------------
# 14 bit division
# -Little edian
# [0000] a_l
# [0001] a_h
# [0002] b_l
# [0003] b_h
# [0004] c_l
# [0005] c_h
# [0006] d_l
# [0007] d_h
# [0008] e_l
# [0009] e_h
# [000a] f
# [0016] ret_l
# [0017] ret_h
#
#l 2e3: c = a
zap zapaj maj ap 04 zap amw
ap 01 zapaj maj ap 05 zap amw
#l 2f2: d = b
ap 02 zapaj maj ap 06 zap amw
ap 03 zapaj maj ap 07 zap amw
#l 302: f = f2
ap 0a zap mw f2
#l 307: e = 0000
ap 08 zap zmw
ap 09 zap zmw
#
# rl c
#l 30f: a = c
ap 04 zapaj maj zap amw
ap 05 zapaj maj ap 01 zap amw
#l 31d: rl a
ap 10 zap mw 2e
ap 11 zap mw 03
ap e1 zap aj ff aj ff
#l 32e: c = a
zap zapaj maj ap 04 zap amw
ap 01 zapaj maj ap 05 zap amw
#
# rl e
#l 33d: a = e
ap 08 zapaj maj zap amw
ap 09 zapaj maj ap 01 zap amw
#l 34b: rl a
ap 10 zap mw 5c
ap 11 zap mw 03
ap e1 zap aj ff aj ff
#l 35c: e = a
zap zapaj maj ap 08 zap amw
ap 01 zapaj maj ap 09 zap amw
#
# e = e - d
#l 36b: a = e
ap 08 zapaj maj zap amw
ap 09 zapaj maj ap 01 zap amw
#l 379: b = d
ap 06 zapaj maj ap 02 zap amw
ap 07 zapaj maj ap 03 zap amw
#l 389: negate a
zap zapaj map ap 01 aj 80 maj zap zap amw
ap 01 zapaj map ap 01 aj 80 maj zap amw
#l 39f: add a, b
ap 0e zap mw b0
ap 0f zap mw 03
ap 91 zap aj ff aj ff
#l 3b0: negate a
zap zapaj map ap 01 aj 80 maj zap zap amw
ap 01 zapaj map ap 01 aj 80 maj zap amw
#l 3c6: e = a
zap zapaj maj ap 08 zap amw
ap 01 zapaj maj ap 09 zap amw
#
# if not carry goto 423
#l 3d5: if carry = 0 goto 3e5
ap 0c zapaj maj
ap e5 ap 03 aj ff
#l 3df: goto 41a
ap 23 ap 04 aj 01
#
# e = e + d
#l 3e5: a = e
ap 08 zapaj maj zap amw
ap 09 zapaj maj ap 01 zap amw
#l 3f3: b = d
ap 06 zapaj maj ap 02 zap amw
ap 07 zapaj maj ap 03 zap amw
#l 403: add a, b
ap 0e zap mw 14
ap 0f zap mw 04
ap 91 zap aj ff aj ff
#l 414: e = a
zap zapaj maj ap 08 zap amw
ap 01 zapaj maj ap 09 zap amw
#
#l 423: f + 1; if zero goto 437
ap 0a zapaj maj
ap 37 ap 04 aj 01
ap 0a zap amw
#
#l 431: goto 30f
ap 0f ap 03 aj ff
#
#l 437: b = f
ap 08 zapaj maj ap 02 zap amw
ap 09 zapaj maj ap 03 zap amw
#
#l 447: a = c
ap 04 zapaj maj zap amw
ap 05 zapaj maj ap 01 zap amw
#
#l 455: rotate left a
ap 10 zap mw 66
ap 11 zap mw 04
ap e1 zap aj ff aj ff
#
#l 466: negate a
zap zapaj map ap 01 aj 80 maj zap zap amw
ap 01 zapaj map ap 01 aj 80 maj zap amw
#
#l 47c: return
ap 17 zapaj maj
ap 16 zap map aap
aj ff aj ff
#--------------------------------
#--------------------------------
#l 489